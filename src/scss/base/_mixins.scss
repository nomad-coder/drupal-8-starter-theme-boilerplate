/*
 * Mixin for easy media queries
 * @include bp(tablet) { SCSS here };
*/
@mixin bp($point) {
    @if $point == biggie {
        @media (max-width : 1600px) { @content; }
    }
    @if $point == tablet {
        @media (max-width : 1024px) { @content; }
    }
    @else if $point == phone {
        @media (max-width : 768px) { @content; }
    }
}

/*
 * Mixin for micro clearfix
 * @include microclearfix;
*/
@mixin microclearfix {
    &:before, &:after { content: ""; display: table; }
    &:after { clear: both; }
    *zoom: 1;
}

/*
 * Mixin for basic CSS triangles
 * @include triangle(up, #000, 50px)
*/
@mixin triangle($direction:up, $color:#000, $size:100px) {
    @if($direction == up) {
        border-color: transparent transparent $color;
        border-style: solid;
        border-width: 0 $size $size;
        height: 0;
        width: 0;
    }
    @if($direction == down) {
        border-color: $color transparent transparent transparent;
        border-style: solid;
        border-width: $size;
        height:0;
        width:0;
    }
    @if($direction == left) {
        border-color: transparent $color transparent transparent;
        border-style: solid;
        border-width: $size $size $size 0;
        height: 0;
        width: 0;
    }
    @if($direction == right) {
        border-color: transparent transparent transparent $color;
        border-style: solid;
        border-width: $size 0 $size $size;
        height:0;
        width:0;
    }
}

/*
 * @font-face mixin
 * Bulletproof font-face via Font Squirrel
 * @include fontface('family', 'assets/fonts/', 'myfontname');
 */

@mixin fontface($font-family, $font-url, $font-name) {
    @font-face {
        font: {
            family: $font-family;
            style: normal;
            weight: normal;
        }
        src: url($font-url + '/' + $font-name + '.eot');
        src: url($font-url + '/' + $font-name + '.eot#iefix') format('embedded-opentype'),
             url($font-url + '/' + $font-name + '.woff2') format('woff2'),
             url($font-url + '/' + $font-name + '.woff') format('woff'),
             url($font-url + '/' + $font-name + '.ttf')  format('truetype'),
             url($font-url + '/' + $font-name + '.svg#' + $font-name) format('svg');
    }
}

/*
 *	Transition duration mixin
 */
@mixin transition($duration) {
    -webkit-transition: $duration;
    -moz-transition: $duration;
    -ms-transition: $duration;
    -o-transition: $duration;
    transition: $duration;
}

/*
 *  Transform rotate in degrees
 */
@mixin rotate($degree) {
    -webkit-transform: rotate($degree);
    -moz-transform: rotate($degree);
    -ms-transform: rotate($degree);
    -o-transform: rotate($degree);
    transform: rotate($degree);
}

/*
 *  Disable element drag and select by user
 */
@mixin disable-drag() {
    user-drag: none;
    user-select: none;
    -moz-user-select: none;
    -webkit-user-drag: none;
    -webkit-user-select: none;
    -ms-user-select: none;
}

/*
 *  Placeholder styling
 */
@mixin input-placeholder {
    input::-webkit-input-placeholder { @content }
    input:-moz-placeholder           { @content }
    input::-moz-placeholder          { @content }
    input:-ms-input-placeholder      { @content }
}
@mixin input-error-placeholder {
    input.error::-webkit-input-placeholder { @content }
    input.error:-moz-placeholder           { @content }
    input.error::-moz-placeholder          { @content }
    input.error:-ms-input-placeholder      { @content }
}

/*
 *  Blur Mixin
 */
@mixin blur($radius) {
    -webkit-filter: blur($radius+px); /* Chrome, Safari */
    -ms-filter: blur($radius+px); /* IE12? */
    filter: url("data:image/svg+xml;utf8,<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><filter id=\"blur\"><feGaussianBlur stdDeviation=\"#{$radius}\" /></filter></svg>#blur"); /* Firefox, Safari, Chrome*/
    filter: progid:DXImageTransform.Microsoft.Blur(Strength=$radius); /* IE9 */
}